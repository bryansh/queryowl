name: Release
on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: pnpm install

      - name: Debug - List files before tauri-action (Unix)
        if: runner.os != 'Windows'
        run: find src-tauri/target -name "*.sig" -o -name "*.tar.gz" 2>/dev/null || echo "No sig or tar.gz files found yet"
      
      - name: Debug - List files before tauri-action (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "src-tauri/target") {
            Get-ChildItem -Path "src-tauri/target" -Recurse -Include "*.sig", "*.tar.gz" | ForEach-Object { $_.FullName }
          } else {
            Write-Host "No sig or tar.gz files found yet"
          }

      - uses: tauri-apps/tauri-action@v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          RUST_LOG: debug
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'QueryOwl v__VERSION__'
          releaseBody: |
            ## What's New
            See the [changelog](https://github.com/bryansh/queryowl/compare/v__VERSION__...HEAD) for details.
            
            ## Installation
            Download the appropriate installer for your platform below.
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
          updaterJsonPreferNsis: true

      - name: Debug - List all files after tauri-action (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "=== Looking for .sig files ==="
          find src-tauri/target -name "*.sig" 2>/dev/null || echo "No .sig files found"
          echo "=== Looking for .tar.gz files ==="
          find src-tauri/target -name "*.tar.gz" 2>/dev/null || echo "No .tar.gz files found"
          echo "=== All bundle files ==="
          find src-tauri/target -path "*/bundle/*" -type f 2>/dev/null || echo "No bundle files found"
      
      - name: Debug - List all files after tauri-action (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "=== Looking for .sig files ==="
          if (Test-Path "src-tauri/target") {
            $sigFiles = Get-ChildItem -Path "src-tauri/target" -Recurse -Include "*.sig" -ErrorAction SilentlyContinue
            if ($sigFiles) { $sigFiles | ForEach-Object { $_.FullName } } else { Write-Host "No .sig files found" }
          }
          Write-Host "=== Looking for .msi files ==="
          if (Test-Path "src-tauri/target") {
            $msiFiles = Get-ChildItem -Path "src-tauri/target" -Recurse -Include "*.msi" -ErrorAction SilentlyContinue
            if ($msiFiles) { $msiFiles | ForEach-Object { $_.FullName } } else { Write-Host "No .msi files found" }
          }
          Write-Host "=== All bundle files ==="
          if (Test-Path "src-tauri/target") {
            $bundleFiles = Get-ChildItem -Path "src-tauri/target" -Recurse | Where-Object { $_.FullName -like "*bundle*" } -ErrorAction SilentlyContinue
            if ($bundleFiles) { $bundleFiles | ForEach-Object { $_.FullName } } else { Write-Host "No bundle files found" }
          }

  update-repo:
    needs: release
    runs-on: ubuntu-latest
    if: success()
    permissions:
      contents: read
    steps:
      - name: Checkout queryowl-updates repo
        uses: actions/checkout@v4
        with:
          repository: bryansh/queryowl-updates
          token: ${{ secrets.UPDATER_TOKEN }}
          path: updates-repo

      - name: Debug - Check GitHub release assets
        run: |
          echo "=== Checking release assets for ${{ github.ref_name }} ==="
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq '.assets[] | {name: .name, size: .size}'

      - name: Get release data
        id: release
        run: |
          VERSION="${{ github.ref_name }}"
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          
          # Wait for release to be available (max 5 minutes)
          for i in {1..30}; do
            RELEASE_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
            
            if [ "$(echo "$RELEASE_DATA" | jq -r '.message // empty')" != "Not Found" ]; then
              echo "Release found after $i attempts"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Release not found after 30 attempts"
              exit 1
            fi
            
            echo "Waiting for release to be available (attempt $i/30)..."
            sleep 10
          done
          
          echo "$RELEASE_DATA" > release.json

      - name: Generate latest.json
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          REPO="${{ github.repository }}"
          
          # Extract download URLs and signatures from release assets
          python3 << 'EOF'
          import json
          import sys
          import urllib.request
          import base64
          
          with open('release.json', 'r') as f:
              release = json.load(f)
          
          if 'message' in release:
              print(f"Error: {release['message']}")
              sys.exit(1)
          
          version = "${{ steps.release.outputs.version }}"
          assets = release.get('assets', [])
          
          platforms = {}
          signature_urls = {}
          
          # First pass: collect platform URLs and signature URLs
          for asset in assets:
              name = asset['name']
              url = asset['browser_download_url']
              
              if name.endswith('.app.tar.gz'):
                  if 'aarch64' in name:
                      platforms['darwin-aarch64'] = {'url': url, 'signature': ''}
                  elif 'x64' in name or 'x86_64' in name:
                      platforms['darwin-x86_64'] = {'url': url, 'signature': ''}
              elif name.endswith('.AppImage'):
                  platforms['linux-x86_64'] = {'url': url, 'signature': ''}
              elif name.endswith('.msi'):
                  platforms['windows-x86_64'] = {'url': url, 'signature': ''}
              elif name.endswith('.sig'):
                  # Map signature files to platforms
                  if '.app.tar.gz.sig' in name:
                      if 'aarch64' in name:
                          signature_urls['darwin-aarch64'] = url
                      elif 'x64' in name or 'x86_64' in name:
                          signature_urls['darwin-x86_64'] = url
                  elif '.AppImage.sig' in name:
                      signature_urls['linux-x86_64'] = url
                  elif '.msi.sig' in name:
                      signature_urls['windows-x86_64'] = url
          
          # Second pass: download and add actual signature content
          for platform in platforms:
              if platform in signature_urls:
                  try:
                      print(f"Downloading signature for {platform} from {signature_urls[platform]}")
                      with urllib.request.urlopen(signature_urls[platform]) as response:
                          # The signature is already base64, but we need to read it as text
                          sig_content = response.read().decode('utf-8').strip()
                          platforms[platform]['signature'] = sig_content
                          print(f"Added signature for {platform}: {sig_content[:50]}...")
                  except Exception as e:
                      print(f"Failed to download signature for {platform}: {e}")
                      platforms[platform]['signature'] = ""
              else:
                  print(f"No signature found for {platform}")
                  platforms[platform]['signature'] = ""
          
          latest = {
              "version": version,
              "pub_date": release['published_at'],
              "platforms": platforms
          }
          
          with open('updates-repo/latest.json', 'w') as f:
              json.dump(latest, f, indent=2)
          
          print(f"Generated latest.json for version {version}")
          print(f"Platforms with signatures: {[p for p in platforms if platforms[p].get('signature')]}")
          EOF

      - name: Commit and push updates
        run: |
          cd updates-repo
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add latest.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update to version ${{ steps.release.outputs.version }}"
            git push
          fi